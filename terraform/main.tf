resource "aws_iam_service_linked_role" "spotfleet" {
  count = var.create_iam_service_linked_role == "true" ? 1 : 0
  aws_service_name = "spotfleet.amazonaws.com"
}

resource "aws_iam_service_linked_role" "spot" {
  count = var.create_iam_service_linked_role == "true" ? 1 : 0
  aws_service_name = "spot.amazonaws.com"
}

resource "aws_iam_service_linked_role" "ec2fleet" {
  count = var.create_iam_service_linked_role == "true" ? 1 : 0
  aws_service_name = "ec2fleet.amazonaws.com"
}

resource "aws_iam_role" "lightspin-snap-scan-role" {
  name = "lightspin-snap-scan"
  assume_role_policy = jsonencode({
      Version = "2012-10-17"
      Statement = [
        {
          Action = "sts:AssumeRole"
          Effect = "Allow"
          Sid    = ""
          Principal = {
            Service = "ec2.amazonaws.com"
          }
        },
      ]
    })
  inline_policy {
    name = "lightspin-snap-scan"
    policy = jsonencode({
                "Version": "2012-10-17",
                "Statement": [
                    {
                        Sid = "VisualEditor0",
                        Effect = "Allow",
                        Action = [
                            "ec2:DetachVolume",
                            "ec2:AttachVolume",
                            "ec2:DeleteVolume",
                            "ec2:CreateVolume",
                            "ec2:CreateTags"
                        ],
                        Resource = [
                            "arn:aws:ec2:*:*:instance/*",
                            "arn:aws:ec2:*::snapshot/*",
                            "arn:aws:ec2:*:*:volume/*"
                        ]
                    },
                    {
                        Sid = "VisualEditor1",
                        Effect = "Allow",
                        Action = [
                            "ec2:DescribeVolumeStatus",
                            "ec2:DescribeInstanceAttribute",
                            "ec2:DescribeVolumes"
                        ],
                        Resource = "*"
                    }
                ]
            })
  }
}

resource "aws_iam_instance_profile" "lightspin-snap-scan-profile" {
  name = "lightspin-snap-scan"
  role = aws_iam_role.lightspin-snap-scan-role.name
  tags = {"Key": "used_by", "Value": "lightspin - ec2 scan"}
}


resource "aws_vpc" "lightspin-snap-scan-vpc" {
  cidr_block       = var.vpc_cidr
  instance_tenancy = "default"

  tags = {
    Name = "lightspin_ec2_scan"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_subnet" "private-subnet" {
  vpc_id     = aws_vpc.lightspin-snap-scan-vpc.id
  cidr_block = var.vpc_private_cidr

  tags = {
    Name = "lightspin_ec2_scan_private"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_subnet" "public-subnet" {
  vpc_id     = aws_vpc.lightspin-snap-scan-vpc.id
  cidr_block = var.vpc_public_cidr

  tags = {
    Name = "lightspin_ec2_scan_public"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.lightspin-snap-scan-vpc.id

  tags = {
    Name = "lightspin_ec2_scan_igw"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_route_table" "default_egrees" {
  vpc_id = aws_vpc.lightspin-snap-scan-vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
  tags = {
    Name = "lightspin_ec2_scan_public_rt"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_route_table_association" "default_egrees" {
  subnet_id = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.default_egrees.id
}

resource "aws_eip" "nat_gateway" {
  vpc = true
  tags = {
    Name = "lightspin_ec2_scan_public_eip"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_nat_gateway" "gw" {
  allocation_id = aws_eip.nat_gateway.id
  subnet_id     = aws_subnet.public-subnet.id

  tags = {
    Name = "lightspin_ec2_scan_public_ngw"
    used_by = "lightspin - ec2 scan"
  }
  depends_on = [aws_internet_gateway.gw]
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.lightspin-snap-scan-vpc.id
  tags = {
    Name = "lightspin_ec2_scan_private_rt"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_route" "private_route_any" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id = aws_nat_gateway.gw.id
}

resource "aws_route_table_association" "private" {
  subnet_id = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private.id
}

resource "aws_security_group" "allow_ssh" {
  name        = "SSH-ONLY"
  description = "Allow SSH inbound traffic"
  vpc_id      = aws_vpc.lightspin-snap-scan-vpc.id

  ingress {
    description = "SSH from VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "lightspin_ec2_scan_private_ssh_sg"
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_security_group" "allow_redis" {
  name        = "REDIS"
  description = "Allow REDIS inbound traffic"
  vpc_id      = aws_vpc.lightspin-snap-scan-vpc.id

  ingress {
    description = "REDIS from VPC"
    from_port   = 6379
    to_port     = 6379
    protocol    = "tcp"
    cidr_blocks = [var.vpc_cidr]
  }

  tags = {
    Name = "lightspin_ec2_scan_private_redis_sg"
    used_by = "lightspin - ec2 scan"
  }
}

resource "tls_private_key" "ssh" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "ssh" {
  key_name = "lightspin_ec2_scan"
  public_key = tls_private_key.ssh.public_key_openssh
  tags = {
    used_by = "lightspin - ec2 scan"
  }
}

resource "aws_launch_template" "snap_scan_template" {
  name = "lightspin-snap-scanner"

  iam_instance_profile {
    name = aws_iam_instance_profile.lightspin-snap-scan-profile.name
  }

  block_device_mappings {
    device_name = "/dev/sda1"

    ebs {
      volume_size = 16
      delete_on_termination = true
    }
  }

  disable_api_termination = false

  image_id = element(data.aws_ami_ids.snap-scan-ami.ids, 0)

  instance_initiated_shutdown_behavior = "terminate"

  instance_market_options {
    market_type = "spot"
  }

  key_name = "lightspin_ec2_scan"

  network_interfaces {
    associate_public_ip_address = false
    delete_on_termination = true
    device_index = 0
    subnet_id = aws_subnet.private-subnet.id
    security_groups = [aws_security_group.allow_ssh.id, aws_security_group.allow_redis.id]
  }

  tag_specifications {
    resource_type = "instance"

    tags = {
      Name = "light-snap-scanner"
      used_by = "lightspin - ec2 scan"
    }
  }

  tag_specifications {
    resource_type = "volume"

    tags = {
      Name = "light-snap-scanner"
      used_by = "lightspin - ec2 scan"
    }
  }
}